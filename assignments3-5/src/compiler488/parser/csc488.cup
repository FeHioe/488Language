// Package and import specifications section.

package compiler488.parser;

import java_cup.runtime.*;        // Must always import this.
import compiler488.ast.*;
import compiler488.ast.decl.*;
import compiler488.ast.expn.*;
import compiler488.ast.stmt.*;
import compiler488.ast.type.*;

/* User code components 1: action code components.
 * Code to be used inside the actions triggered when productions are matched.
 * If any common code is needed for more than one action , put it here.
 */
// action code {:
// your code goes HERE
//:};

/* User code components 2: parser code components.
 * Modifications to the default generated parser
 */
parser code {:

    String lastError;

    /* Override the report_error method so it will display the line and
     * column of where the error occurred in the input as well as the
     * reason for the error which is passed into the method in the
     * String 'message'.
     * @param message  error message to print
     * @param info     symbol containing line/column numbers
     */
    public void report_error(String message, Object info)
    {
    String st =  "Error";

        if (info instanceof java_cup.runtime.Symbol)
        {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

        /* s.left is supposed to hold the line number of the error.
         * s.right is supposed to hold the column number.
             * If either is < 0 the parser may have run off the end of the program
             * and a Syntax Error message without line number may be printed.
         */

            if (s.left >= 0)                // Check line number.
            {
                st += " in line " + (s.left + 1);
                if (s.right >= 0)            // Check column number.
                    st += ", column " + (s.right + 1);
            }
            else
               st += " at end of input " ;
        }
        st += ": " + message;
        System.err.println (st);
        lastError = st;
    }

    // Override the report_fatal_error method to use the report_error method.
    /** @throws SyntaxErrorException                        */
    public void report_fatal_error (String message, Object info) throws SyntaxErrorException
    {
        report_error (message, info);
        throw new SyntaxErrorException (lastError);
    }

    // version string for printing version in Main
    public static final String version = "Winter 2017" ;

:};

/* User code components 3: initialization code.
 * If you want some code to be executed before the parser asks for the first
 * token, add it here.
 */
init with {:
:};

/* User code components 4: scanner specification code.
 * If you need to override the way the parser asks the scanner for the
 * next token, put your preferred method here.  Uncomment the line following
 * this comment, replace the line after that with your code, and uncomment
 * the line after that.
 */
// scan with {:
// your code goes here
// :};

/* Symbol lists section.
 * The names of terminals and non-terminals are not allowed to be CUP
 * reserved words.  These include "code", "action", "parser", "terminal",
 * "non", "nonterminal", "init", "scan", "with", "start", "precedence",
 * "left", "right", "nonassoc", "import", and "package".
 */

// DEFINITIONS for CSC488S Source Language  Winter  2017

// Terminals returned by the scanner with no value attached.
terminal AND, OR, NOT, TRUE, FALSE;
terminal BOOLEAN, INTEGER, FUNCTION, PROCEDURE;
terminal DO, ELSE, EXIT, IF;
terminal READ, REPEAT, RETURN, NEWLINE, THEN, UNTIL;
terminal VAR, WHEN, WHILE, WITHX, WRITE;

// Special-character terminals, no value attached
terminal L_PAREN, R_PAREN, L_SQUARE, R_SQUARE, L_CURLEY, R_CURLEY;
terminal EQUAL, GREATER,LESS, COMMA, DOT, QUESTION, COLON;
terminal PLUS, MINUS, TIMES, DIVIDE;

// Terminals returned by the scanner with a value.
terminal String  IDENT;
terminal Integer INTCONST;
terminal String  TEXTCONST;

// Non-terminals that have no value.
// nonterminal xxx

// Non-terminals that have a value.
// nonterminal type nameList ;

nonterminal Program program;
nonterminal Stmt statement;
nonterminal Declaration declaration;
nonterminal Scope scope;
nonterminal ASTList<Stmt> statements;
nonterminal ASTList<Declaration> declarations;
nonterminal Stmt matchedStatement;
nonterminal IfStmt unmatchedStatement;
nonterminal ASTList<DeclarationPart> variablenames;
nonterminal compiler488.ast.Printable output;
nonterminal Type type;
nonterminal ASTList<Expn> arguments;
nonterminal ASTList<ScalarDecl> parameters;
nonterminal Expn variable;
nonterminal Expn expression;
nonterminal DeclarationPart variablename;
nonterminal ASTList<compiler488.ast.Readable> inputs;
nonterminal ASTList<compiler488.ast.Printable> outputs;
nonterminal IntConstExpn bound;
nonterminal ProcedureCallStmt procedureCall;
nonterminal ScalarDecl parameter;
nonterminal Expn conjunction, negation, compareExpn, arithExpn, term, factor, primary;
nonterminal ConstExpn constant;

// PLEASE NOTE: your grammar can not use the 'precedence'
// feature of java-cup. The lines below should remain
// commented out.
//
//precedence left PLUS, MINUS;
//precedence left TIMES, DIVIDE;        // Higher precedence.
precedence left ELSE;

// The grammar section.

// This specifies the initial symbol of the grammar.
start with program;

/* Notice that sometimes the action must be inside the production rule,
 * not after it.  This is a subtle yet significant difference from YACC.
 * This is because the CUP parser is looking ahead one token.  It ALWAYS
 * reads one more token before it will act on the production.
 */

program            ::= scope:s // the main program
                       {:
                          RESULT = new Program();
                          RESULT.setDeclarations(s.getDeclarations());
                          RESULT.setStatements(s.getStatements());
                          RESULT.setFilePosition(sleft, sright);
                       :}
                   ;

scope              ::= L_CURLEY:lc declarations:decls statements:stmts R_CURLEY // scope with declarations and statements
                       {:
                          RESULT = new Scope();
                          RESULT.setDeclarations(decls);
                          RESULT.setStatements(stmts);
                          RESULT.setFilePosition(lcleft, lcright);
                       :}
                   |   L_CURLEY:lc statements:stmts R_CURLEY                    // scope with statments only
                       {:
                          RESULT = new Scope();
                          RESULT.setStatements(stmts);
                          RESULT.setFilePosition(lcleft, lcright);
                       :}
                   |   L_CURLEY:lc R_CURLEY                                     // empty scope
                       {:
                          RESULT = new Scope();
                          RESULT.setFilePosition(lcleft, lcright);
                       :}
                   ;

statements         ::= statement:stmt // sequence of statements
                       {:
                          RESULT = new ASTList<Stmt>(stmt);
                          RESULT.setFilePosition(stmtleft, stmtright);
                       :}
                   |   statements:stmts statement:stmt
                       {:  RESULT = stmts.addLast(stmt); :}
                   ;

declarations       ::= declaration:decl // sequence of declarations
                       {:
                          RESULT = new ASTList<Declaration>(decl);
                          RESULT.setFilePosition(declleft, declright);
                       :}
                   |   declarations:decls declaration:decl
                       {: RESULT = decls.addLast(decl); :}
                   ;

statement          ::= matchedStatement:mstmt
                       {: RESULT = mstmt; :}
                   |   unmatchedStatement:ustmt
                       {: RESULT = ustmt; :}
                   ;

matchedStatement   ::= variable:v COLON EQUAL expression:e                                  // assignment statement
                       {:
                          AssignStmt as = new AssignStmt();
                          as.setLval(v);
                          as.setRval(e);
                          as.setFilePosition(vleft, vright);
                          RESULT = as;
                       :}
                   |   IF:ifex expression:e THEN matchedStatement:t ELSE matchedStatement:f // if statements
                       {:
                          IfStmt ifstmt = new IfStmt();
                          ifstmt.setCondition(e);
                          ifstmt.setWhenTrue(t);
                          ifstmt.setWhenFalse(f);
                          ifstmt.setFilePosition(ifexleft, ifexright);
                          RESULT = ifstmt;
                       :}
                   |   WHILE:w expression:e DO statement:body                               // while statement
                       {:
                          WhileDoStmt wd = new WhileDoStmt();
                          wd.setExpn(e);
                          wd.setBody(body);
                          wd.setFilePosition(wleft, wright);
                          RESULT = wd;
                       :}
                   |   REPEAT:r statement:body UNTIL expression:e                           // repeat statement
                       {:
                          RepeatUntilStmt ru = new RepeatUntilStmt();
                          ru.setBody(body);
                          ru.setExpn(e);
                          ru.setFilePosition(rleft, rright);
                          RESULT = ru;
                       :}
                   |   EXIT:ex                                                               // exit statements
                       {:
                          ExitStmt es = new ExitStmt();
                          es.setFilePosition(exleft, exright);
                          RESULT = es;
                       :}
                   |   EXIT:ex INTCONST:level
                       {:
                          ExitStmt es = new ExitStmt();
                          es.setLevel(level);
                          es.setFilePosition(exleft, exright);
                          RESULT = es;
                       :}
                   |   EXIT:ex WHEN expression:e
                       {:
                          ExitStmt es = new ExitStmt();
                          es.setExpn(e);
                          es.setFilePosition(exleft, exright);
                          RESULT = es;
                       :}
                   |   EXIT:ex INTCONST:level WHEN expression:e
                       {:
                          ExitStmt es = new ExitStmt();
                          es.setLevel(level);
                          es.setExpn(e);
                          es.setFilePosition(exleft, exright);
                          RESULT = es;
                       :}
                   |   RETURN:r WITHX expression:e
                       {:
                          ReturnStmt rs = new ReturnStmt();
                          rs.setValue(e);
                          rs.setFilePosition(rleft, rright);
                          RESULT = rs;
                       :}
                   |   RETURN:r                                                             // return statements
                       {:
                          RESULT = new ReturnStmt();
                          RESULT.setFilePosition(rleft, rright);
                       :}
                   |   WRITE:wr outputs:out                                                 // input/output statements
                       {:
                          WriteStmt ws = new WriteStmt();
                          ws.setOutputs(out);
                          ws.setFilePosition(wrleft, wrright);
                          RESULT = ws;
                       :}
                   |   READ:re inputs:in
                       {:
                          ReadStmt rs = new ReadStmt();
                          rs.setInputs(in);
                          rs.setFilePosition(releft, reright);
                          RESULT = rs;
                       :}
                   |   procedureCall:pc                                                     // procedure call
                       {:
                          RESULT = pc;
                       :}
                   |   scope:s                                                              // embedded scope
                       {:
                          RESULT = s;
                       :}
                   ;

unmatchedStatement ::= IF:ifex expression:e THEN statement:t
                       {:
                          IfStmt ifstmt = new IfStmt();
                          ifstmt.setCondition(e);
                          ifstmt.setWhenTrue(t);
                          ifstmt.setFilePosition(ifexleft, ifexright);
                          RESULT = ifstmt;
                       :}
                   |   IF:ifex expression:e THEN matchedStatement:t ELSE unmatchedStatement:f
                       {:
                          IfStmt ifstmt = new IfStmt();
                          ifstmt.setCondition(e);
                          ifstmt.setWhenTrue(t);
                          ifstmt.setWhenFalse(f);
                          ifstmt.setFilePosition(ifexleft, ifexright);
                          RESULT = ifstmt;
                       :}
                   ;

procedureCall      ::= IDENT:i                                // call procedure with no parameters
                       {:
                          ProcedureCallStmt pcs = new ProcedureCallStmt();
                          pcs.setName(i);
                          pcs.setFilePosition(ileft, iright);
                          RESULT = pcs;
                       :}
                   |   IDENT:i L_PAREN arguments:args R_PAREN // call procedure with parameters
                       {:
                          ProcedureCallStmt pcs = new ProcedureCallStmt();
                          pcs.setName(i);
                          pcs.setArguments(args);
                          pcs.setFilePosition(ileft, iright);
                          RESULT = pcs;
                       :}
                   ;

declaration        ::= VAR:var variablenames:vnames COLON type:t  // declare scalar/array variables
                       {:
                          MultiDeclarations mdp = new MultiDeclarations();
                          mdp.setElements(vnames);
                          mdp.setType(t);
                          mdp.setFilePosition(varleft, varright);
                          RESULT = mdp;
                       :}
                   |   FUNCTION:func IDENT:i COLON type:t scope:s // declare function
                       {:
                          RoutineDecl rd = new RoutineDecl();
                          RoutineBody bd = new RoutineBody();
                          bd.setBody(s);
                          rd.setName(i);
                          rd.setType(t);
                          rd.setRoutineBody(bd);
                          rd.setFilePosition(funcleft, funcright);
                          RESULT = rd;
                       :}
                   |   FUNCTION:func IDENT:i L_PAREN parameters:params R_PAREN COLON type:t scope:s
                       {:
                          RoutineDecl rd = new RoutineDecl();
                          RoutineBody bd = new RoutineBody();
                          bd.setBody(s);
                          bd.setParameters(params);
                          rd.setName(i);
                          rd.setType(t);
                          rd.setRoutineBody(bd);
                          rd.setFilePosition(funcleft, funcright);
                          RESULT = rd;
                       :}
                   |   PROCEDURE:proc IDENT:i scope:s             // declare procedure
                       {:
                          RoutineDecl rd = new RoutineDecl();
                          RoutineBody bd = new RoutineBody();
                          bd.setBody(s);
                          rd.setName(i);
                          rd.setRoutineBody(bd);
                          rd.setFilePosition(procleft, procright);
                          RESULT = rd;
                       :}
                   |   PROCEDURE:proc IDENT:i L_PAREN parameters:params R_PAREN scope:s
                       {:
                          RoutineDecl rd = new RoutineDecl();
                          RoutineBody bd = new RoutineBody();
                          bd.setBody(s);
                          bd.setParameters(params);
                          rd.setName(i);
                          rd.setRoutineBody(bd);
                          rd.setFilePosition(procleft, procright);
                          RESULT = rd;
                       :}
                   ;

variablenames      ::= variablename:vname // list of variables being declared
                       {:
                          RESULT = new ASTList<DeclarationPart>(vname);
                          RESULT.setFilePosition(vnameleft, vnameright);
                       :}
                   |   variablenames:vnames COMMA variablename:vname
                       {: RESULT = vnames.addLast(vname); :}
                   ;

variablename       ::= IDENT:i                                             // scalar variable
                       {:
                          ScalarDeclPart sdp = new ScalarDeclPart();
                          sdp.setName(i);
                          sdp.setFilePosition(ileft, iright);
                          RESULT = sdp;
                       :}
                   |   IDENT:i L_SQUARE INTCONST:ub R_SQUARE               // array variable with upper bound
                       {:
                          ArrayDeclPart adp = new ArrayDeclPart();
                          adp.setName(i);
                          adp.setLowerBoundary(1);
                          adp.setUpperBoundary(ub);
                          adp.setSize(ub);
                          adp.setFilePosition(ileft, iright);
                          RESULT = adp;
                       :}
                   |   IDENT:i L_SQUARE bound:bl DOT DOT bound:bu R_SQUARE // array variable with upper/lower bounds
                       {:
                          ArrayDeclPart adp = new ArrayDeclPart();
                          adp.setName(i);
                          adp.setDeclaredLowerBound(true);
                          adp.setLowerBoundary(bl.getValue());
                          adp.setUpperBoundary(bu.getValue());
                          adp.setSize(bl.getValue() - bu.getValue() + 1);
                          adp.setFilePosition(ileft, iright);
                          RESULT = adp;
                       :}
                   ;

bound              ::= INTCONST:ic           // positive array bound
                       {:
                          IntConstExpn ice = new IntConstExpn();
                          ice.setValue(ic);
                          ice.setFilePosition(icleft, icright);
                          RESULT = ice;
                       :}
                   |   MINUS:min INTCONST:ic // negative array bound
                       {:
                          IntConstExpn ice = new IntConstExpn();
                          ice.setValue(-ic);
                          ice.setFilePosition(minleft, minright);
                          RESULT = ice;
                       :}
                   ;

type               ::= INTEGER:intr // integer type
                       {:
                          RESULT = new IntegerType();
                          RESULT.setFilePosition(intrleft, intrright);
                       :}
                   |   BOOLEAN:bool // boolean type
                       {:
                          RESULT = new BooleanType();
                          RESULT.setFilePosition(boolleft, boolright);
                       :}
                   ;

outputs            ::= output:out // list of output expressions
                       {:
                          RESULT = new ASTList<compiler488.ast.Printable>(out);
                          RESULT.setFilePosition(outleft, outright);
                       :}
                   |   outputs:outs COMMA output:out
                       {: RESULT = outs.addLast(out); :}
                   ;

output             ::= expression:e // integer expression
                       {:
                          RESULT = e;
                       :}
                   |   TEXTCONST:tc // text constant
                       {:
                          TextConstExpn tce = new TextConstExpn();
                          tce.setValue(tc);
                          tce.setFilePosition(tcleft, tcright);
                          RESULT = tce;
                       :}
                   |   NEWLINE:nl   // newline constant
                       {:
                          RESULT = new SkipConstExpn();
                          RESULT.setFilePosition(nlleft, nlright);
                       :}
                   ;

inputs             ::= variable:v // list of variables being read into
                       {:
                          RESULT = new ASTList<compiler488.ast.Readable>((compiler488.ast.Readable)v);
                          RESULT.setFilePosition(vleft, vright);
                       :}
                   |   inputs:ins COMMA variable:v
                       {:
                          RESULT = ins.addLast((compiler488.ast.Readable)v);
                       :}
                   ;

arguments          ::= expression:arg // list of function/procedure arguments
                       {:
                          RESULT = new ASTList<Expn>(arg);
                          RESULT.setFilePosition(argleft, argright);
                       :}
                   |   arguments:args COMMA expression:arg
                       {: RESULT = args.addLast(arg); :}
                   ;

parameters         ::= parameter:param // list of function/procedure formal parameters
                       {:
                          RESULT = new ASTList<ScalarDecl>(param);
                          RESULT.setFilePosition(paramleft, paramright);
                       :}
                   |   parameters:params COMMA parameter:param
                       {: RESULT = params.addLast(param); :}
                   ;

parameter          ::= IDENT:i COLON type:t // declare one parameter
                       {:
                          ScalarDecl sd = new ScalarDecl();
                          sd.setName(i);
                          sd.setType(t);
                          sd.setFilePosition(ileft, iright);
                          RESULT = sd;
                       :}
                   ;

expression         ::= conjunction:c // disjunctions, associate left-to-right
                       {: RESULT = c; :}
                   |   expression:e OR conjunction:c
                       {:
                          BoolExpn be = new BoolExpn();
                          be.setLeft(e);
                          be.setRight(c);
                          be.setOpSymbol("or");
                          be.setFilePosition(eleft, eright);
                          RESULT = be;
                       :}
                   ;

conjunction        ::= negation:neg // conjunctions, associate left-to-right
                       {: RESULT = neg; :}
                   |   conjunction:c AND negation:neg
                       {:
                          BoolExpn be = new BoolExpn();
                          be.setLeft(c);
                          be.setRight(neg);
                          be.setOpSymbol("and");
                          be.setFilePosition(cleft, cright);
                          RESULT = be;
                       :}
                   ;

negation           ::= compareExpn:ce // negations
                       {: RESULT = ce; :}
                   |   NOT:not negation:neg
                       {:
                          NotExpn ne = new NotExpn();
                          ne.setOperand(neg);
                          ne.setOpSymbol("not");
                          ne.setFilePosition(notleft, notright);
                          RESULT = ne;
                       :}
                   ;

compareExpn        ::= arithExpn:ae // comparisons, do not associate
                       {: RESULT = ae; :}
                   |   arithExpn:ael EQUAL arithExpn:aer
                       {:
                          EqualsExpn ce = new EqualsExpn();
                          ce.setLeft(ael);
                          ce.setRight(aer);
                          ce.setOpSymbol("=");
                          ce.setFilePosition(aelleft, aelright);
                          RESULT = ce;
                       :}
                   |   arithExpn:ael NOT EQUAL arithExpn:aer
                       {:
                          EqualsExpn ce = new EqualsExpn();
                          ce.setLeft(ael);
                          ce.setRight(aer);
                          ce.setOpSymbol("not =");
                          ce.setFilePosition(aelleft, aelright);
                          RESULT = ce;
                       :}
                   |   arithExpn:ael LESS arithExpn:aer
                       {:
                          CompareExpn ce = new CompareExpn();
                          ce.setLeft(ael);
                          ce.setRight(aer);
                          ce.setOpSymbol("<");
                          ce.setFilePosition(aelleft, aelright);
                          RESULT = ce;
                       :}
                   |   arithExpn:ael LESS EQUAL arithExpn:aer
                       {:
                          CompareExpn ce = new CompareExpn();
                          ce.setLeft(ael);
                          ce.setRight(aer);
                          ce.setOpSymbol("<=");
                          ce.setFilePosition(aelleft, aelright);
                          RESULT = ce;
                       :}
                   |   arithExpn:ael GREATER arithExpn:aer
                       {:
                          CompareExpn ce = new CompareExpn();
                          ce.setLeft(ael);
                          ce.setRight(aer);
                          ce.setOpSymbol(">");
                          ce.setFilePosition(aelleft, aelright);
                          RESULT = ce;
                       :}
                   |   arithExpn:ael GREATER EQUAL arithExpn:aer
                       {:
                          CompareExpn ce = new CompareExpn();
                          ce.setLeft(ael);
                          ce.setRight(aer);
                          ce.setOpSymbol(">=");
                          ce.setFilePosition(aelleft, aelright);
                          RESULT = ce;
                       :}
                   ;

arithExpn          ::= term:t // expressions, associate + , - left-to-right
                       {: RESULT = t; :}
                   |   arithExpn:ael PLUS term:t
                       {:
                          ArithExpn ae = new ArithExpn();
                          ae.setLeft(ael);
                          ae.setRight(t);
                          ae.setOpSymbol("+");
                          ae.setFilePosition(aelleft, aelright);
                          RESULT = ae;
                       :}
                   |   arithExpn:ael MINUS term:t
                       {:
                          ArithExpn ae = new ArithExpn();
                          ae.setLeft(ael);
                          ae.setRight(t);
                          ae.setOpSymbol("-");
                          ae.setFilePosition(aelleft, aelright);
                          RESULT = ae;
                       :}
                   ;

term               ::= factor:f // terms, associate * , /   left-to-right
                       {: RESULT = f; :}
                   |   term:t TIMES factor:f
                       {:
                          ArithExpn ae = new ArithExpn();
                          ae.setLeft(t);
                          ae.setRight(f);
                          ae.setOpSymbol("*");
                          ae.setFilePosition(tleft, tright);
                          RESULT = ae;
                       :}
                   |   term:t DIVIDE factor:f
                       {:
                          ArithExpn ae = new ArithExpn();
                          ae.setLeft(t);
                          ae.setRight(f);
                          ae.setOpSymbol("/");
                          ae.setFilePosition(tleft, tright);
                          RESULT = ae;
                       :}
                   ;

factor             ::= primary:p // unary minus
                       {: RESULT = p; :}
                   |   MINUS:min factor:f
                       {:
                          UnaryMinusExpn ume = new UnaryMinusExpn();
                          ume.setOperand(f);
                          ume.setOpSymbol("-");
                          ume.setFilePosition(minleft, minright);
                          RESULT = ume;
                       :}
                   ;

primary            ::= constant:c                             // integer or boolean constant
                       {: RESULT = c; :}
                   |   variable:v                             // scalar, array variable or function call
                       {: RESULT = v; :}
                   |   IDENT:i L_PAREN arguments:args R_PAREN // function call
                       {:
                          FunctionCallExpn fce = new FunctionCallExpn();
                          fce.setArguments(args);
                          fce.setIdent(i);
                          fce.setFilePosition(ileft, iright);
                          RESULT = fce;
                       :}
                   |   L_PAREN expression:e R_PAREN           // parenthesized expression
                       {: RESULT = e; :}
                   |   L_PAREN:lp expression:c QUESTION expression:t COLON expression:f R_PAREN
                       {:
                          ConditionalExpn ce = new ConditionalExpn();
                          ce.setCondition(c);
                          ce.setTrueValue(t);
                          ce.setFalseValue(f);
                          ce.setFilePosition(lpleft, lpright);
                          RESULT = ce;
                       :}
                   ;

constant           ::= INTCONST:ic // integer constant
                       {:
                          IntConstExpn ice = new IntConstExpn();
                          ice.setValue(ic);
                          ice.setFilePosition(icleft, icright);
                          RESULT = ice;
                       :}
                   |   TRUE:t      // constant true
                       {:
                          BoolConstExpn bce = new BoolConstExpn();
                          bce.setValue(true);
                          bce.setFilePosition(tleft, tright);
                          RESULT = bce;
                       :}
                   |   FALSE:f     // constant false
                       {:
                          BoolConstExpn bce = new BoolConstExpn();
                          bce.setValue(false);
                          bce.setFilePosition(fleft, fright);
                          RESULT = bce;
                       :}
                   ;

variable           ::= IDENT:i                                // scalar variable or function call
                       {:
                          IdentExpn ie = new IdentExpn();
                          ie.setIdent(i);
                          ie.setFilePosition(ileft, iright);
                          RESULT = ie;
                       :}
                   |   IDENT:i L_SQUARE expression:e R_SQUARE // element of an array
                       {:
                          SubsExpn se = new SubsExpn();
                          se.setOperand(e);
                          se.setOpSymbol("[]");
                          se.setVariable(i);
                          se.setFilePosition(ileft, iright);
                          RESULT = se;
                       :}
                   ;
