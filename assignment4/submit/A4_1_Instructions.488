% Prologue code
PUSHMT
PUSH UNDEFINED
SWAP
PUSH (frame pointer)
LOAD
SWAP
PUSH (display LL)
LOAD
SWAP
DUP
PUSH (display LL)
SWAP
STORE
PUSH (frame pointer)
SWAP
STORE 

% Epilogue code
PUSHMT
PUSH (frame pointer)
LOAD
SUB
PUSH 4            % control data
ADD
POPN
SWAP
PUSH (LL location)
LOAD
PUSH (m)
SWAP
SUB
SWAP
STORE
SWAP
PUSH (LL location)
SWAP
STORE
BR

% 1-3
PUSH UNDEFINED  % Integer i, offset = 4
PUSH UNDEFINED  % Integer j, offset = 5
PUSH UNDEFINED  % Integer k, offset = 6
PUSH UNDEFINED  % Integer l, offset = 7
PUSH UNDEFINED  % Integer m, offset = 8

% 1-4
PUSH UNDEFINED  % Boolean p, offset = 9
PUSH UNDEFINED  % Boolean q, offset = 10
PUSH UNDEFINED  % Boolean r, offset = 11
PUSH UNDEFINED  % Boolean s, offset = 12
PUSH UNDEFINED  % Boolean t, offset = 13

% 1-5
PUSH UNDEFINED  % Array A[7]
PUSH 7          % Lower bound offset = 14
DUPN        

PUSH UNDEFINED  % Array B[-100 .. 50]
PUSH 151        % Lower bound offset = 21
DUPN       

% 1-6 
PUSH UNDEFINED  % Array C[-7 .. -3]
PUSH 5          % Lower bound offset = 172
DUPN        

PUSH UNDEFINED  % Array D[400]
PUSH 400        % Lower bound offset = 177
DUPN    

% 1-7 - i := 1
ADDR 0 4  % i
PUSH 1    % 1
STORE     % :=

% 1-8 - j := i + 3
ADDR 0 5  % j 
ADDR 0 4  % i
LOAD      % i value
PUSH 3    % 3
ADD       % i + 3
STORE     % j := i + 3

% 1-9 - k := i - j
ADDR 0 6  % k
ADDR 0 4  % i
LOAD      % i value
ADDR 0 5  % j
LOAD      % j value
SUB       % i - j
STORE     % k := i - j

% 1-10 - l := j * k
ADDR 0 7  % l
ADDR 0 5  % j
LOAD      % j value
ADDR 0 6  % k 
LOAD      % k value
MULT      % j * k
STORE     % l := j * k

% 1-11 - m := k / l
ADDR 0 8  % m
ADDR 0 6  % k
LOAD      % k value
ADDR 0 7  % l 
LOAD      % l value
DIV       % k / l
STORE     % m := k / l

% 1-11 - p := true
ADDR 0 9  % p 
PUSH MACHINE_TRUE % true 
STORE     % p := true

% 1-12 - q := false
ADDR 0 10  % q
PUSH MACHINE_FALSE  % false
STORE      % q := false

% 1-13 - r := not q
ADDR 0 11  % r
PUSH 1     % negative value
ADDR 0 10  % q
LOAD       % q value
SUB        % not q
STORE      % r := not q

% 1-14 - s := p or q
ADDR 0 12  % s
ADDR 0 11  % p
LOAD       % p value
ADDR 0 10  % q
LOAD       % q value
OR         % p or q
STORE      % s := p or q

% 1-15 - t := s and p
ADDR 0 13  % t
ADDR 0 12  % s
LOAD       % s value
PUSH (false addr) % addr of first instruction in false body
BF
ADDR 0 9   % p
LOAD
PUSH (false addr) % addr of first instruction in false body
BF
PUSH MACHINE_TRUE % true
PUSH (addr after false) % addr of instruction after false body 
BR
PUSH MACHINE_FALSE % false
STORE       % t := s and p

% 1-16 - p := i < j
ADDR 0 9  % p
ADDR 0 4  % i
LOAD      % i value
ADDR 0 5  % j 
LOAD      % j value
LT        % i < j
STORE     % p := i < j

% 1-17 - q := k <= l
ADDR 0 10 % q   
ADDR 0 6  % k
LOAD      % k value
ADDR 0 7  % l
LOAD      % l value
LT        % k < l
ADDR 0 6  % k
LOAD      % k value
ADDR 0 7  % l
LOAD      % l value
EQ        % k = l
OR        % k < l or k = l
STORE     % q := k <= l

% 1-18 - r := j = l
ADDR 0 11 % r
ADDR 0 5  % j
LOAD      % j value
ADDR 0 7  % l 
LOAD      % l value
EQ        % j = l
STORE     % r := j = l

% 1-19 - s := k not = m
ADDR 0 12 % s
ADDR 0 6  % k
LOAD      % k value
ADDR 0 8  % m
LOAD      % m value
LT        % k < m
ADDR 0 8  % m
LOAD      % m value
ADDR 0 6  % k
LOAD      % k value
LT        % m < k
OR        % k < m or m < k
STORE     % s := k not = m  

% 1-20 - t := j > k
ADDR 0 13 % t
ADDR 0 6  % k
LOAD      % k value
ADDR 0 5  % j 
LOAD      % j value
LT        % k < j
STORE     % t := j > k

% 1-21 - t := j >= k
ADDR 0 13 % t
ADDR 0 6  % j
LOAD      % j value
ADDR 0 5  % k 
LOAD      % k value
LT        % k < j
ADDR 0 5  % k 
LOAD      % k value
ADDR 0 6  % j 
LOAD      % j value
EQ        % j = k
OR        % k < j or j = k
STORE     % t := j >= k

% 1-22 - q := r = s
ADDR 0 10 % q
ADDR 0 11 % r
LOAD      % r value
ADDR 0 12 % s
LOAD      % s value
EQ        % r = s
STORE     % q := r = s

% 1-23 - t := s not = r
ADDR 0 13 % t
ADDR 0 12 % s
LOAD      % s value
ADDR 0 11 % r
LOAD      % r value
LT        % s < r
ADDR 0 11 % r
LOAD      % r value
ADDR 0 12 % s
LOAD      % s value
LT        % r < s
OR        % s < r or r < s
STORE     % t := s not = r

% 1-24 - A[5] := 5
ADDR 0 14 % Address of first element A[0]
PUSH 5    % index
PUSH 0    % lower bound
SUB       % offset calculated
ADD       % ADDR 0 19
PUSH 5    % 5
STORE     % A[5] := 5

% 1-25 - B[i+1] := A[j-2]
ADDR 0 21 % Address of first element B[0]
ADDR 0 4  % i
LOAD      % i value
PUSH 1
ADD       % i + 1
PUSH -100 % lower bound
SUB       % offset calculated
ADD       % ADDR 0 (i + 1)
ADDR 0 14 % Address of first element A[0]
ADDR 0 5  % j
LOAD      % j value
PUSH 2
SUB       % j - 2
PUSH 100 % lower bound
NEG
SUB       % offset calculated
ADD       % ADDR 0 (j - 2)
STORE     % B[i+1] := A[j-2]


% 1-26 - C[-4] := p or q
ADDR 0 172 % Address of first element C[0]
PUSH 4    % index
NEG
PUSH 7    % lower bound
NEG     
SUB       % offset calculated
ADD       
LOAD      % ADDR 0 C[-4]
ADDR 0 9  % p
LOAD      % p value
ADDR 0 10 % q
LOAD      % q value
OR        % p or q
STORE     % C[-4] := p or q

% 1-27 - r := D[ i + 200 ]
ADDR 0 11  % r
ADDR 0 177 % Address of first element D[0]
ADDR 0 4   % i
LOAD       % i value
PUSH 200
ADD        % i + 200
PUSH 0     % lower bound    
SUB        % offset calculated
ADD        % D[i + 200]
LOAD       % D[i + 200] value
STORE      % r:= D[i + 200]

% 1-28 - Cleanup
PUSH 573
POPN

HALT